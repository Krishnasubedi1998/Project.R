
 # AUTHOR: KRISHNA SUBEDI
 # PROJECT #2 
 # DATA MINING
# Loading the required libraries
library(quantmod) ; library(TTR);

system.time ({
  
  intial_Equity = 100000
  
  # Pulling  data from Yahoo finance
  symbol = "BTC-USD"
  data = getSymbols(symbol, from ="2021-01-01",auto.assign = FALSE)
  colnames(data) = c("Open","High","Low","Close","Volume","Adjusted")
  
  data = na.omit(data)
  closeprice = Cl(data)
  

  # Computing RSI
  rsi = round(RSI(closeprice, n = 14, maType="WMA"),1);
  rsi = c(NA,head(rsi,-1))
  
  # Computing SMA and LMA
  ShMA = 20; LMA = 50;
  
  sma = round(SMA(closeprice, ShMA),1)
  sma = c(NA,head(sma,-1))
  
  lma = round(SMA(closeprice, LMA),1)
  lma = c(NA,head(lma,-1))
  
  # Computing ADX 
  data22 = ADX(data[,c("High","Low","Close")])
  data22 = as.data.frame(data22)
  adx = round(data22$ADX,1)
  adx = c(NA,head(adx,-1))
  
  # Create the label 
  data$Return = round(dailyReturn(data$Close, type='arithmetic'),2)
  colnames(data) = c("Open","High","Low","Close","Volume","Adjusted","Return")
  
  class = character(nrow(data))
  class = ifelse(coredata(data$Return) >= 0,"Up","Down")
  
  data2 = data.frame(data,class,rsi,sma,lma,adx)
  write.csv(data2,file="decision tree charting_table.csv")
  
  data = data.frame(class,rsi,sma,lma,adx)
  data = na.omit(data)
  
  write.csv(data,file="decision tree charting.csv")
  
})

library("quantmod")
library("rpart")
library("rpart.plot")

df = read.csv("decision tree charting.csv")
df = df[,-1]
colnames(df) = c("Class","RSI","SMA","LMA","ADX")

trainingSet<-df[1:500,]
testSet<-df[501:nrow(df),]

DecisionTree<-rpart(Class~RSI+SMA+LMA+ADX,data=trainingSet, cp=.001)

prp(DecisionTree,type=2,extra=8)
table(predict(DecisionTree,testSet,type="class"),testSet[,5],dnn=list('predicted','actual'))

#Project3

# ASSOCIATION RULE 

# 11/12/2021

tail(df)
#importing the libraries
library(arules)
library(arulesViz)


transactions(df)

colnames(df)[c(1,2,3,4,5)]

#df <- df %>% mutate(
#  RSI = (RSI > 0),
#  ADX = (ADX >0)
#)

trans <- transactions(df)


summary(trans)
#printing the columns 

colnames(trans)

#graph

image(trans)

#frequencyplot

itemFrequencyPlot(trans,topN = 20)

#frequent itemsets
its <- apriori(trans, parameter=list(target = "frequent"))

its 

#getting the first 10 itemsets
inspect(head(its, n = 10))


#ggplot
library(ggplot2)
#ggplot(tibble(`Itemset Size` = factor(size(its))), aes(`Itemset Size`)) + geom_bar()

rules <- apriori(trans, parameter = list(support = 0.05, confidence = 0.9))

inspect(head(rules))

#plotting 
plot(rules,jitter = 1)

plot(rules, shading = "order", jitter=0)

plot(head(rules, n = 100), method = "graph")

#Lab of Regression

#project 4

#Multiple Regression

#DATA Mining
#AUTHOR: KRISHNA SUBEDI

tail(df)


linear <- lm(RSI ~ ADX, df)

linear

ADX_to_RSI <- function(ValueofADX){
  ValueofRSI <- 0.01309*ValueofADX +51.56000
  return (ValueofRSI)
}

ADX_to_RSI(100)

summary(linear)

plot(linear)

linearNoIntercept <- lm(RSI ~ 0 +ADX, df)

summary(linearNoIntercept)

#linear modeling for the LMA and SMA


linear <- lm(LMA ~ SMA , df)
linear

plot(linear)



#ggplot for the linear regression model of RSI and ADX in color red

ggplot(df,aes(x= RSI, y = ADX))+geom_jitter(color = "Red") +geom_smooth(method = lm)

#multiple regression

multiple <- lm(RSI ~ ADX, df)
summary(multiple)

#multiple2
multiple2 <- lm(ADX ~ RSI,df)
summary(multiple2,)

#ggplot for the RSI and ADX 
ggplot(df,aes(x= RSI, y = ADX))+
  geom_point()+
  geom_smooth(method = lm)

#ggplot for the linear regression model of RSI and ADX using the 
#method of glm.

ggplot(df,aes(x= RSI, y = ADX))+
  geom_point()+
  geom_smooth(method = "glm")

#ggplot for getting the high non-linear function. 
ggplot(df,aes(x= RSI, y = ADX))+
  geom_point()+
  geom_smooth()
